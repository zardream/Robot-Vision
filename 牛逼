// 调用摄像头采集图像.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//


#include"pch.h"
#include<iostream>
#include<opencv2/opencv.hpp>
#include<math.h>





using namespace cv;
using namespace std;

double distance(Point2f a, Point2f b)
{
	double res = 0;
	res = sqrt((a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y));
	return res;
}
int main()
{

	int LowH = 30;
	int HighH = 140;

	int LowS = 160;
	int HighS = 255;

	int LowV = 220;
	int HighV = 255;
	Mat src = imread("C:/Users/zjy/Desktop/装甲板.jpg");
	Mat imgHSV;
	vector<Mat> hsvSplit;
	cvtColor(src, imgHSV, COLOR_BGR2HSV);//将src转为HSV图imgHSV

	split(imgHSV, hsvSplit);//通道分离
	equalizeHist(hsvSplit[2], hsvSplit[2]);
	merge(hsvSplit, imgHSV);//通道合并
	Mat imgThresholded;

	inRange(imgHSV, Scalar(LowH, LowS, LowV), Scalar(HighH, HighS, HighV), imgThresholded);

	Mat element = getStructuringElement(MORPH_RECT, Size(7, 7));
	morphologyEx(imgThresholded, imgThresholded, MORPH_OPEN, element);//形态学开，先对图像腐蚀再膨胀
	morphologyEx(imgThresholded, imgThresholded, MORPH_CLOSE, element);//形态学闭，先膨胀再腐蚀
	imshow("Thresholded Image", imgThresholded);
	imshow("Original", src);



	//cvtColor(src, src, COLOR_RGB2GRAY);
	Mat matSrc = imgThresholded;
	GaussianBlur(matSrc, matSrc, Size(5, 5), 0);//高斯滤波，除噪音
	vector<vector<Point> > contours;//contours的类型，双重的vector
	vector<Vec4i> hierarchy;//Vec4i是指每一个vector元素中有四个int型数据。
	//阈值
	threshold(matSrc, matSrc, 21, 255, THRESH_BINARY);//二值化
	//寻找轮廓，这里注意，findContours的输入参数要求是二值图像，二值图像的来源大致有两种，第一种用threshold，第二种用canny
	findContours(matSrc.clone(), contours, hierarchy, CV_RETR_EXTERNAL, CHAIN_APPROX_SIMPLE, Point(0, 0));//找到轮廓
	vector<Rect> boundRect(contours.size());//定义外接矩形
	/*/// 计算矩
	vector<Moments> mu(contours.size());
	for (int i = 0; i < contours.size(); i++)
	{
		mu[i] = moments(contours[i], false);
	}
	///  计算中心矩:
	vector<Point2f> mc(contours.size());
	for (int i = 0; i < contours.size(); i++)
	{
		mc[i] = Point2f(mu[i].m10 / mu[i].m00, mu[i].m01 / mu[i].m00);
	}*/
	/// 绘制轮廓
	
	Mat drawing = Mat::zeros(matSrc.size(), CV_8UC1);
	for (int i = 0; i < contours.size(); i++) {
		drawContours(drawing, contours, i, Scalar(0, 0, 255), 2, 8);  //绘制轮廓
		RotatedRect rect = minAreaRect(contours[i]);
		Point2f P[4];
		rect.points(P);
		double length = max(distance(P[0], P[3]), distance(P[0], P[1]));
		double width = min(distance(P[0], P[3]), distance(P[0], P[1]));
		
		if (length / width > 5.0) {
			for (int j = 0; j <= 3; j++)
			{

				line(src, P[j], P[(j + 1) % 4], Scalar(255), 2);

			}
		}
	}
	
	//int x0 = 0, y0 = 0, w0 = 0, h0 = 0, num = 0;
	//for (int i = 0; i < contours.size(); i++)
	//{
	//	boundRect[i] = boundingRect((Mat)contours[i]); //查找每个轮廓的外接矩形
	//	drawContours(drawing, contours, i, Scalar(0, 0, 255), 2, 8);  //绘制轮廓
	//	x0 = boundRect[i].x;
	//	y0 = boundRect[i].y;
	//	w0 = boundRect[i].width;
	//	h0 = boundRect[i].height;
	//	cout << (double)h0 / (double)w0 << endl;
	//	if (w0*h0 > 1000) {
	//		rectangle(src, Point(x0, y0), Point(x0 + w0, y0 + h0), Scalar(0, 255, 0), 2, 8);
	//	}
	//}
	//for (int i = 0; i < contours.size(); i++)
	//{
	//	double area = contourArea(contours[i], true);
	//	cout << area;
	//	Scalar color = Scalar(255);
	//	drawContours(drawing, contours, i, Scalar(0, 0, 255), 2, 8);  //绘制轮廓
	//	circle(drawing, mc[i], 4, color, -1, 8, 0);
	//}
	///绘制中点
	/*for (int i = 0; i < contours.size(); i++) {

	}*/



	imshow("outImage", src);
	waitKey();
	return 0;






		
}


	







// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门提示: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
