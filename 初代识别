#include"stdafx.h"
#include<iostream>
#include<opencv2/opencv.hpp>
#include<math.h>

using namespace cv;
using namespace std;



double distance(Point2f a, Point2f b)

{

	double res = 0;

	res = sqrt((a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y));

	return res;

}

Point2f mid_point(Point2f a, Point2f b) {
	Point2f res;
	res.x = (a.x + b.x) / 2;
	res.y = (a.y + b.y) / 2;
	return res;
}

int LowH = 0;

int HighH = 180;

int LowS = 0;

int HighS = 30;

int LowV = 200;

int HighV = 255;

int main()

{
	VideoCapture capture(0);

	while (1) {
		Mat src;
		capture >> src;


		Mat srcConvert;
		Mat original;
		//src.convertTo(srcConvert, src.type(), 1, 0);
		original = src;
		//src = srcConvert;


		Mat imgHSV;

		vector<Mat> hsvSplit;

		cvtColor(src, imgHSV, COLOR_BGR2HSV);//将src转为HSV图imgHSV



		split(imgHSV, hsvSplit);//通道分离

		equalizeHist(hsvSplit[2], hsvSplit[2]);

		merge(hsvSplit, imgHSV);//通道合并

		Mat imgThresholded;

		inRange(imgHSV, Scalar(LowH, LowS, LowV), Scalar(HighH, HighS, HighV), imgThresholded);



		Mat element = getStructuringElement(MORPH_RECT, Size(7, 7));

		morphologyEx(imgThresholded, imgThresholded, MORPH_OPEN, element);//形态学开，先对图像腐蚀再膨胀

		morphologyEx(imgThresholded, imgThresholded, MORPH_CLOSE, element);//形态学闭，先膨胀再腐蚀

		imshow("Thresholded Image", imgThresholded);

	//	imshow("Original", src);



		//cvtColor(src, src, COLOR_RGB2GRAY);

		Mat matSrc = imgThresholded;

		GaussianBlur(matSrc, matSrc, Size(5, 5), 0);//高斯滤波，除噪音

		vector<vector<Point> > contours;//contours的类型，双重的vector

		vector<Vec4i> hierarchy;//Vec4i是指每一个vector元素中有四个int型数据。

								//阈值

		threshold(matSrc, matSrc, 21, 255, THRESH_BINARY);//二值化

														  //寻找轮廓，这里注意，findContours的输入参数要求是二值图像，二值图像的来源大致有两种，第一种用threshold，第二种用canny

		findContours(matSrc.clone(), contours, hierarchy, CV_RETR_EXTERNAL, CHAIN_APPROX_SIMPLE, Point(0, 0));//找到轮廓

		vector<Rect> boundRect(contours.size());//定义外接矩形
		// 绘制轮廓
		Mat drawing = Mat::zeros(matSrc.size(), CV_8UC1);

		for (int i = 0; i < contours.size(); i++) {

			drawContours(drawing, contours, i, Scalar(0, 0, 255), 2, 8);  //绘制轮廓

			RotatedRect rect = minAreaRect(contours[i]);

			Point2f P[4];

			rect.points(P);

			double length = max(distance(P[0], P[3]), distance(P[0], P[1]));

			double width = min(distance(P[0], P[3]), distance(P[0], P[1]));



			if (length / width > 3) {

				for (int j = 0; j <= 3; j++)

				{
					line(src, P[j], P[(j + 1) % 4], Scalar(0, 0, 255), 2);
				}

			}

		}




		imshow("outImage", src);

		waitKey(30);
	}
	return 0;



}
